// src/components/ai-workbench/hs-code-classifier.tsx
'use client';

import React, { useState, useTransition, useCallback, useEffect } from 'react';
import type { Product, User } from '@/types';
import { runHsCodeClassification, getProducts } from '@/lib/actions';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ProductTrackerSelector } from '../dpp-tracker/product-tracker-selector';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Loader2, Scale, Bot, Info, ShieldAlert } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '../ui/tooltip';

export default function HsCodeClassifier({ user }: { user: User }) {
  const [products, setProducts] = useState<Product[]>([]);
  const [isLoadingProducts, setIsLoadingProducts] = useState(true);
  const [selectedProductId, setSelectedProductId] = useState<string | null>(null);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [isClassifying, startClassificationTransition] = useTransition();
  const { toast } = useToast();

  useEffect(() => {
    async function loadProducts() {
      try {
        const prods = await getProducts(user.id);
        setProducts(prods);
      } catch (error) {
        toast({ title: 'Error', description: 'Could not load products.', variant: 'destructive' });
      } finally {
        setIsLoadingProducts(false);
      }
    }
    loadProducts();
  }, [user.id, toast]);

  const handleProductSelect = useCallback((productId: string | null) => {
    setSelectedProductId(productId);
    const product = products.find(p => p.id === productId) || null;
    setSelectedProduct(product);
  }, [products]);

  const handleRunClassification = useCallback(() => {
    if (!selectedProductId) return;
    
    startClassificationTransition(async () => {
      try {
        const updatedProduct = await runHsCodeClassification(selectedProductId, user.id);
        setSelectedProduct(updatedProduct);
        setProducts(prev => prev.map(p => p.id === updatedProduct.id ? updatedProduct : p));
        toast({
          title: 'Classification Complete',
          description: 'HS Code has been generated by AI.',
        });
      } catch (error: any) {
        toast({
          title: 'Classification Failed',
          description: error.message || 'An error occurred while running the classification.',
          variant: 'destructive',
        });
      }
    });
  }, [selectedProductId, user.id, toast]);

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Scale /> HS Code Classifier
        </CardTitle>
        <CardDescription>
          Select a product to get an AI-powered Harmonized System (HS) code classification for customs and trade.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        {isLoadingProducts ? <Loader2 className="h-5 w-5 animate-spin" /> : 
          <ProductTrackerSelector products={products} selectedProductId={selectedProductId} onProductSelect={handleProductSelect} />
        }
        <div className="rounded-lg border bg-muted/50 p-4 min-h-[150px] flex flex-col justify-center">
            {isClassifying ? (
                 <div className="flex-1 flex flex-col items-center justify-center text-muted-foreground">
                    <Loader2 className="h-8 w-8 animate-spin mb-2" />
                    <p>Classifying product...</p>
                </div>
            ) : selectedProduct?.hsCodeAnalysis ? (
                <div className="space-y-2">
                    <p className="text-3xl font-bold font-mono text-primary">
                    {selectedProduct.hsCodeAnalysis.code}
                    </p>
                    <p className="text-sm text-muted-foreground">
                    {selectedProduct.hsCodeAnalysis.description}
                    </p>
                    <TooltipProvider>
                    <Tooltip>
                        <TooltipTrigger asChild>
                        <p className="text-xs text-muted-foreground flex items-center gap-1">
                            <Info className="h-3 w-3" />
                            Confidence: {Math.round(selectedProduct.hsCodeAnalysis.confidence * 100)}%
                        </p>
                        </TooltipTrigger>
                        <TooltipContent>
                        <p>AI-assessed confidence in this classification.</p>
                        </TooltipContent>
                    </Tooltip>
                    </TooltipProvider>
                </div>
            ) : selectedProduct ? (
                 <div className="text-center text-muted-foreground">
                    <p>No HS code classified yet for {selectedProduct.productName}.</p>
                </div>
            ) : (
                <div className="text-center text-muted-foreground">
                    <p>Select a product to begin.</p>
                </div>
            )}
        </div>
      </CardContent>
      <CardFooter>
        <Button onClick={handleRunClassification} disabled={isClassifying || !selectedProductId}>
          {isClassifying ? (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          ) : (
            <Bot className="mr-2 h-4 w-4" />
          )}
          {selectedProduct?.hsCodeAnalysis ? 'Reclassify with AI' : 'Classify with AI'}
        </Button>
      </CardFooter>
    </Card>
  );
}
