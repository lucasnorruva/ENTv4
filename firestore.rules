
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      // Check if the user document exists and has the 'Admin' role
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['Admin']);
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function belongsToCompany(companyId) {
        // Check if the user making the request belongs to the specified company
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    // Products:
    // - Any authenticated user can query/list and get products (dashboards need this).
    // - A user can only create/update products for their own company.
    // - Only Admins can delete products.
    match /products/{productId} {
      allow list, get: if isAuthenticated();
      allow create: if isAuthenticated() && belongsToCompany(request.resource.data.companyId);
      allow update: if isAuthenticated() && belongsToCompany(resource.data.companyId);
      allow delete: if isAdmin();
    }
    
    // Companies:
    // - Authenticated users can list/read company info.
    // - Only Admins can create, update, or delete companies.
    match /companies/{companyId} {
      allow list, get: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Users:
    // - Authenticated users can list/read user profiles (e.g., for audit logs).
    // - Users can only edit their own profile.
    // - Admins can create, update, or delete any user profile.
    match /users/{userId} {
      allow list, get: if isAuthenticated();
      allow create, delete: if isAdmin();
      allow update: if isOwner(userId) || isAdmin();
    }
    
    // Webhooks, API Keys, and other user-specific data:
    // - Users can only read or write their own documents in these collections.
    match /webhooks/{webhookId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow list: if isAuthenticated();
    }
    match /apiKeys/{keyId} {
       allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
       allow list: if isAuthenticated();
    }
    
    // Compliance Paths:
    // - Any authenticated user can read them.
    // - Only Admins can write/modify them.
    match /compliancePaths/{pathId} {
      allow read, list: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Audit Logs:
    // - Any authenticated user can read the logs.
    // - Only the system can create logs (enforced by server-side logic).
    match /auditLogs/{logId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if false; // Only backend can write
    }
    
    // Tickets and Production Lines:
    // - Allow any authenticated user to read/write for now.
    // - This could be refined later with more specific company/role checks.
    match /serviceTickets/{ticketId} {
      allow read, write, list: if isAuthenticated();
    }

    match /supportTickets/{ticketId} {
        allow read, write, list: if isAuthenticated();
        allow create; // Allow unauthenticated users to create support tickets
    }
    
    match /productionLines/{lineId} {
      allow read, write, list: if isAuthenticated();
    }
  }
}
