rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions to make rules more readable and reusable
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isAdmin() {
        return getUserData().roles.hasAny(['Admin']);
    }

    function belongsToCompany(companyId) {
        return getUserData().companyId == companyId;
    }

    // Rules for the 'products' collection
    match /products/{productId} {
      // Any authenticated user can read a published product.
      // Users can read their own draft/archived products. Admins can read all.
      allow get: if isAuthenticated() && (resource.data.status == 'Published' || belongsToCompany(resource.data.companyId) || isAdmin());
      
      // Allow authenticated users to list products (for dashboards/catalogs)
      // The application logic should filter based on role.
      allow list: if isAuthenticated();

      // Only users from the product's company can create/update.
      allow create, update: if isAuthenticated() && belongsToCompany(request.resource.data.companyId);

      // Only admins or owners of DRAFT products can delete.
      allow delete: if isAuthenticated() && (isAdmin() || (belongsToCompany(resource.data.companyId) && resource.data.status == 'Draft'));
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // Admins can get any user. Users can get their own data.
      allow get: if isAuthenticated() && (isAdmin() || isUser(userId));
      
      // Only Admins can list all users.
      allow list: if isAuthenticated() && isAdmin();

      // Only Admins can create/update users. Users can update their own profile.
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && (isAdmin() || isUser(userId));
    }

    // Rules for 'companies' collection
    match /companies/{companyId} {
        // Any authenticated user can read company data (e.g., for displaying supplier names)
        allow get, list: if isAuthenticated();
        // Only admins can create or update company details
        allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Rules for audit logs - append-only for authenticated users
    match /auditLogs/{logId} {
        allow create: if isAuthenticated();
        // Only admins can read the full audit log
        allow get, list: if isAuthenticated() && isAdmin();
    }

    // Rules for compliance paths - readable by all authenticated, managed by admin
    match /compliancePaths/{pathId} {
        allow get, list: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && isAdmin();
    }
    
    // Rules for webhooks and API keys - only accessible by the user who owns them or admins
    match /webhooks/{webhookId} {
        allow read, write: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }

    match /apiKeys/{keyId} {
        allow read, write: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }
    
    // Rules for tickets and production lines
    match /serviceTickets/{ticketId} {
      allow read, write: if isAuthenticated(); // Simplified for now
    }
    
    match /supportTickets/{ticketId} {
        allow create: if isAuthenticated();
        allow read, write: if isAuthenticated() && isAdmin();
    }
    
    match /productionLines/{lineId} {
        allow read, write: if isAuthenticated(); // Simplified for now
    }
  }
}
