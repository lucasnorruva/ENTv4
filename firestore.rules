rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isAuth() && getUserData().roles.hasAny(['Admin']);
    }

    function isCompanyMember(companyId) {
      return isAuth() && getUserData().companyId == companyId;
    }


    // --- COLLECTION RULES ---

    // Products can be read publicly if published.
    // Authenticated users can list products for their dashboards.
    // Writes are restricted to admins or members of the product's company.
    match /products/{productId} {
      allow get: if resource.data.status == 'Published' || (isAuth() && (isAdmin() || isCompanyMember(resource.data.companyId)));
      allow list: if isAuth(); // Allows queries, individual docs still checked by `get`
      allow create: if isAuth();
      allow update, delete: if isAuth() && (isAdmin() || isCompanyMember(resource.data.companyId));
    }

    // Companies can be read by any authenticated user (e.g., to see supplier names).
    // Only admins can create, update, or delete companies.
    match /companies/{companyId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    // Users can be read by any authenticated user (to resolve names/avatars).
    // A user can only write to their own document, or an admin can write to any.
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isUser(userId) || isAdmin();
    }
    
    // Compliance Paths can be read by anyone authenticated, but only managed by admins.
    match /compliancePaths/{pathId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    // Audit logs are append-only. Only the system (or admins) can create them.
    // Readable by admins.
    match /auditLogs/{logId} {
      allow read, create: if isAdmin();
      allow update, delete: if false; // Immutable
    }
    
    // Webhooks and API keys can only be managed by the user they belong to or an admin.
    match /webhooks/{webhookId} {
      allow read, write: if isAuth() && (isUser(resource.data.userId) || isAdmin());
    }

    match /apiKeys/{keyId} {
      allow read, write: if isAuth() && (isUser(resource.data.userId) || isAdmin());
    }
    
    // Service tickets can be viewed/managed by their creator or an admin/service provider.
    match /serviceTickets/{ticketId} {
      allow read, write: if isAuth() && (isUser(resource.data.userId) || isAdmin() || getUserData().roles.hasAny(['Service Provider', 'Manufacturer']));
    }
    
    // Support tickets are write-only for creation, then managed by admins.
    match /supportTickets/{ticketId} {
       allow create: if true; // Anyone can create a support ticket
       allow read, update, delete: if isAdmin();
    }
    
    // Production lines are managed by company members or admins.
    match /productionLines/{lineId} {
        allow read: if isAuth();
        allow write: if isAuth() && (isAdmin() || isCompanyMember(resource.data.companyId));
    }

    // Fallback rule to deny access to any other collection.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
