rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions to make rules more readable and reusable.
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      // It's safe to use `get` here because our rules below will ensure
      // that this function is only ever called in an authorized context.
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function userHasRole(role) {
      // Checks if the signed-in user's `roles` array contains the specified role.
      return isAuthenticated() && role in getUserData(request.auth.uid).roles;
    }

    function userOwnsCompany(companyId) {
      // Checks if the signed-in user belongs to the specified company.
      return isAuthenticated() && getUserData(request.auth.uid).companyId == companyId;
    }
    
    // --- Collection Rules ---

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read their own profile. Admins can read any profile.
      allow read: if isUser(userId) || userHasRole('Admin');
      
      // A user can update their own profile. Admins can update any.
      allow update: if isUser(userId) || userHasRole('Admin');
      
      // Only Admins can create or delete users through the UI.
      allow create, delete: if userHasRole('Admin');
    }
    
    // Rules for the 'companies' collection
    match /companies/{companyId} {
      // A user can read their own company's details. Admins can read any.
      allow read: if userOwnsCompany(companyId) || userHasRole('Admin');
      
      // Only Admins can create, update, or delete companies.
      allow write: if userHasRole('Admin');
    }

    // Rules for the 'products' collection
    match /products/{productId} {
      // Anyone can read a published product.
      // Authenticated users with global roles can read any product.
      // Users can read products from their own company.
      allow read: if resource.data.status == 'Published'
                  || (isAuthenticated() && (
                      userOwnsCompany(resource.data.companyId) ||
                      userHasRole('Admin') ||
                      userHasRole('Auditor') ||
                      userHasRole('Compliance Manager') ||
                      userHasRole('Business Analyst') ||
                      userHasRole('Retailer') ||
                      userHasRole('Recycler') ||
                      userHasRole('Service Provider')
                    ));
      
      // Users can create a product for their own company.
      allow create: if isAuthenticated() && userOwnsCompany(request.resource.data.companyId);

      // Users can update a product if they are an admin or belong to the product's company.
      // Fine-grained logic (e.g., preventing a supplier from approving their own product)
      // is handled by server-side actions, which is a secure and standard pattern.
      allow update: if isAuthenticated() && (userHasRole('Admin') || userOwnsCompany(resource.data.companyId));
      
      // Users can delete a product if they are an admin or belong to the product's company.
      allow delete: if isAuthenticated() && (userHasRole('Admin') || userOwnsCompany(resource.data.companyId));
    }

    // Rules for 'compliancePaths' collection
    match /compliancePaths/{pathId} {
      // Any authenticated user can read the standards.
      allow read: if isAuthenticated();
      
      // Only specific roles can modify the standards.
      allow write: if userHasRole('Admin') || userHasRole('Compliance Manager') || userHasRole('Auditor');
    }

    // Rules for 'auditLogs' collection
    match /auditLogs/{logId} {
      // Logs are created server-side by authenticated actions.
      allow create: if isAuthenticated();
      // Only Admins can read the full audit trail.
      allow read: if userHasRole('Admin');
      // Logs are immutable and cannot be changed or deleted.
      allow update, delete: if false;
    }
    
    // Rules for other collections...
    match /apiKeys/{keyId} {
      allow read, write, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /serviceTickets/{ticketId} {
      allow read, write: if userHasRole('Service Provider') || userHasRole('Admin');
    }
    
    match /settings/{docId} {
      allow read, write: if userHasRole('Admin') || userHasRole('Developer');
    }
    
    match /productionLines/{lineId} {
      allow read: if userHasRole('Manufacturer') || userHasRole('Admin');
      allow write: if false; // Managed server-side
    }
  }
}
