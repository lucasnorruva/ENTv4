rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules cleaner
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      return isAuthenticated() && getUserData().roles.hasAny(['Admin']);
    }

    function isCompanyMember(companyId) {
        return isAuthenticated() && getUserData().companyId == companyId;
    }

    // Products can be read by anyone if published, or by company members/admins if not.
    // Writes are restricted to company members with correct permissions.
    match /products/{productId} {
      allow get: if resource.data.status == 'Published' || (isAuthenticated() && (isAdmin() || isCompanyMember(resource.data.companyId)));
      allow list: if isAuthenticated();
      allow create: if isAuthenticated() && isCompanyMember(request.resource.data.companyId);
      allow update, delete: if isAuthenticated() && (isAdmin() || isCompanyMember(resource.data.companyId));
    }

    // Users can be read by admins. Users can update their own data.
    match /users/{userId} {
      allow get: if isAuthenticated() && (isAdmin() || request.auth.uid == userId);
      allow list: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && (isAdmin() || request.auth.uid == userId);
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Companies can be read by admins.
    match /companies/{companyId} {
        allow get, list: if isAuthenticated() && isAdmin();
        allow create, update, delete: if isAuthenticated() && isAdmin();
    }

    // Compliance Paths are public to all authenticated users. Only admins can write.
    match /compliancePaths/{pathId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isAdmin();
    }

    // Audit Logs are write-only for the system and read-only for admins.
    match /auditLogs/{logId} {
        allow read: if isAuthenticated() && isAdmin();
        allow create: if true;
        allow update, delete: if false;
    }
    
    // API Keys are only accessible by their owner or an admin.
    match /apiKeys/{keyId} {
      allow read, write: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
    }
    
    // Webhooks are only accessible by their owner or an admin.
    match /webhooks/{webhookId} {
      allow read, write: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
    }

    // Service Tickets can be accessed by authenticated users.
    // In a real app, this would be more granular.
    match /serviceTickets/{ticketId} {
      allow read, write: if isAuthenticated();
    }
    
    // Support tickets can be read/written by admins, and created by anyone.
    match /supportTickets/{ticketId} {
      allow read, write: if isAuthenticated() && isAdmin();
      allow create: if true;
    }
    
    // Production lines are accessible to authenticated users.
    // In a real app, this would be restricted to company members.
    match /productionLines/{lineId} {
      allow read, write: if isAuthenticated();
    }
  }
}
